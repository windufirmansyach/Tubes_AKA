{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TUBES_DAA.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "WyslpY23SPDH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from random import randrange\n",
        "import matplotlib.pyplot as plt\n",
        "import multiprocessing\n",
        "import time\n",
        "from tqdm import tqdm\n",
        "\n",
        "VIEWMAX = 5000"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qR5I9YhIyYxa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Algorithm Area\n",
        "\n",
        "def bubbleSort(arr):\n",
        "  \"\"\"Algortima Sorting mengunakan metode Brute Force dan terurut Ascending\"\"\" \n",
        "  n = len(arr) \n",
        "  \n",
        "  for i in range(n): \n",
        "    for j in range(0, n-i-1): \n",
        "      if arr[j] > arr[j+1] : \n",
        "        arr[j], arr[j+1] = arr[j+1], arr[j] \n",
        "\n",
        "\n",
        "def partition(low, high,arr):\n",
        "  \"\"\"Partition dalam quick sort menggunakan DnC\"\"\"\n",
        "  pivotItem = arr[low]\n",
        "  j = low\n",
        "  i = low + 1\n",
        "  while(i <= high):\n",
        "    if(arr[i] < pivotItem):\n",
        "      j += 1\n",
        "      arr[i], arr[j] = arr[j] , arr[i]\n",
        "    i += 1\n",
        "  pivot = j\n",
        "  arr[low], arr[pivot] = arr[pivot], arr[low]\n",
        "  return pivot\n",
        "\n",
        "def quicksort(arr, low, high):\n",
        "  \"\"\"Fungsi pengurutan menggunakan QuickSort terurut Ascending\"\"\"\n",
        "  if(high > low):\n",
        "    pivot = partition(low,high,arr)\n",
        "    quicksort(arr, low, pivot-1)\n",
        "    quicksort(arr, pivot+1, high)\n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MJVQOhuS1Yel",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#utilities\n",
        "\n",
        "def isSorted(arr):\n",
        "  if(all(arr[i] <= arr[i + 1] for i in range(len(arr)-1))):\n",
        "    return True\n",
        "  return False\n",
        "\n",
        "def viewTest(arr,message):\n",
        "  print(\"Create {} plot\".format(message))\n",
        "  plt.bar([i+1 for i in range(len(arr))], arr)\n",
        "  plt.title(message)\n",
        "  plt.show()\n",
        "\n",
        "def bubbleTest(arr):\n",
        "  bubble_test = arr.copy()\n",
        "\n",
        "  print(\"bubble sort start \")\n",
        "  start = time.time() * 1000\n",
        "  bubbleSort(bubble_test)\n",
        "  end = time.time() * 1000\n",
        "  \n",
        "  print(\"bubble sort done, is sorted ? {} , time = {} miliseconds\".\n",
        "        format(isSorted(bubble_test),end-start))\n",
        "  if(len(arr) <= VIEWMAX):\n",
        "    viewTest(bubble_test,'Bubble Sort Test')\n",
        "\n",
        "def quickTest(arr):\n",
        "  qck_test = arr.copy()\n",
        "  \n",
        "  print(\"quick sort start \")\n",
        "  start = time.time() * 1000\n",
        "  quicksort(qck_test,0,len(qck_test)-1)\n",
        "  end = time.time() * 1000\n",
        "  \n",
        "  print(\"quick sort done, is sorted ? {} , time = {} miliseconds\".\n",
        "        format(isSorted(qck_test),end-start))\n",
        "  \n",
        "  if(len(arr) <= VIEWMAX):\n",
        "    viewTest(qck_test,'quick Sort Test')\n",
        "\n",
        "# Test Case Area\n",
        "def sattolo_cycle(items) -> None:\n",
        "    \"\"\"Sattolo's algorithm.\"\"\"\n",
        "    i = len(items)\n",
        "    while i > 1:\n",
        "        i = i - 1\n",
        "        j = randrange(i)  # 0 <= j <= i-1\n",
        "        items[j], items[i] = items[i], items[j]\n",
        "\n",
        "def createTestCase(n,randomize=True):\n",
        "  arr = [i+1 for i in range(n)]\n",
        "  if(randomize):\n",
        "    sattolo_cycle(arr)\n",
        "  return arr"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NSpXNNYfMsAI",
        "colab_type": "text"
      },
      "source": [
        "Size of Data Test Case"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pZNtHytBMENd",
        "colab_type": "code",
        "outputId": "38afa1f0-962c-448a-e470-3fba66e2592b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Main Driver\n",
        "N = int(input('Nilai N = '))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Nilai N = 1000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aBJ9pobBMJSz",
        "colab_type": "text"
      },
      "source": [
        "Normal Case"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HMoStPFH1S3G",
        "colab_type": "code",
        "outputId": "8ef8d134-e1f6-4f4e-eb80-f93a46b81059",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 926
        }
      },
      "source": [
        "arr = createTestCase(N)\n",
        "if(len(arr) <= VIEWMAX):\n",
        "  viewTest(arr,'Test Case')\n",
        "\n",
        "p1 = multiprocessing.Process(target=bubbleTest, args=(arr,))\n",
        "p2 = multiprocessing.Process(target=quickTest, args=(arr,))\n",
        "\n",
        "p1.start()\n",
        "p2.start()\n",
        "\n",
        "p1.join()\n",
        "p2.join()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Create Test Case plot\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "bubble sort start \n",
            "quick sort start \n",
            "quick sort done, is sorted ? True , time = 3.99853515625 miliseconds\n",
            "Create quick Sort Test plot\n",
            "bubble sort done, is sorted ? True , time = 128.8544921875 miliseconds\n",
            "Create Bubble Sort Test plot\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tPLH5RZFLlMK",
        "colab_type": "text"
      },
      "source": [
        "Worst Case Condition Quick Sort"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W110cbY2KVpg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import sys\n",
        "sys.setrecursionlimit(10000000)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "42apcxKxMAu5",
        "colab_type": "code",
        "outputId": "ba03b474-c778-48de-eb7a-ff9e4ed8282a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 926
        }
      },
      "source": [
        "arr = createTestCase(N, randomize=False)\n",
        "if(len(arr) <= VIEWMAX):\n",
        "  viewTest(arr,'Test Case')\n",
        "\n",
        "p1 = multiprocessing.Process(target=bubbleTest, args=(arr,))\n",
        "p2 = multiprocessing.Process(target=quickTest, args=(arr,))\n",
        "\n",
        "p1.start()\n",
        "p2.start()\n",
        "\n",
        "p1.join()\n",
        "p2.join()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Create Test Case plot\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "bubble sort start \n",
            "quick sort start \n",
            "bubble sort done, is sorted ? True , time = 83.709716796875 miliseconds\n",
            "Create Bubble Sort Test plot\n",
            "quick sort done, is sorted ? True , time = 94.719482421875 miliseconds\n",
            "Create quick Sort Test plot\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iwfG0AZjNOiJ",
        "colab_type": "text"
      },
      "source": [
        "Time Complexity Graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hzFaotCZRV4B",
        "colab_type": "code",
        "outputId": "87b82608-4d29-4e0a-eaa7-35d37c59c0de",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        }
      },
      "source": [
        "data = [(i+1)*20 for i in range(5)]\n",
        "cases = [createTestCase(case) for case in data]\n",
        "\n",
        "quick_time = []\n",
        "for i in tqdm(range(len(data))):\n",
        "  arr = cases[i]\n",
        "  quick_arr = arr.copy()\n",
        "  quick_start = time.time() * 1000\n",
        "  quicksort(quick_arr,0,len(arr)-1)\n",
        "  quick_end = time.time() * 1000\n",
        "  quick_time.append(quick_end - quick_start)\n",
        "  time.sleep(1)\n",
        "\n",
        "print('Done quick sort')\n",
        "time.sleep(1)\n",
        "bubble_time = []\n",
        "for i in tqdm(range(len(data))):\n",
        "  arr = cases[i]\n",
        "  bubble_arr = arr.copy()\n",
        "  bubble_start = time.time() * 1000\n",
        "  bubbleSort(bubble_arr)\n",
        "  bubble_end = time.time() * 1000\n",
        "  bubble_time.append(bubble_end - bubble_start)\n",
        "  time.sleep(1)\n",
        "\n",
        "print('\\nDone bubble sort')\n"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 5/5 [00:05<00:00,  1.00s/it]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Done quick sort\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 5/5 [00:05<00:00,  1.00s/it]"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Done bubble sort\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lhphnjdfbuCx",
        "colab_type": "code",
        "outputId": "c5d6c049-e28a-4357-f3bc-7824ee6e562b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        }
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        " \n",
        "# set width of bar\n",
        "barWidth = 0.25\n",
        "\n",
        "r1 = np.arange(len(quick_time))\n",
        "r2 = [x + barWidth for x in r1]\n",
        "\n",
        "# Make the plot\n",
        "plt.figure(dpi=100)\n",
        "plt.bar(r1, quick_time, color='blue', width=barWidth, edgecolor='white',\n",
        "        label='Quick Sort')\n",
        "plt.bar(r2, bubble_time, color='red', width=barWidth, edgecolor='white', \n",
        "        label='Bubble Sort')\n",
        " \n",
        "plt.xlabel('Size of Data (N)', fontweight='bold')\n",
        "plt.ylabel('Time in miliseconds')\n",
        "plt.xticks([r + barWidth for r in range(len(quick_time))], data)\n",
        "\n",
        "\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ESJzf0orQlvO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
